Journal:

Semaine 1:
-Finir la class vecteur
-création fichiers JOURNAL, REPONSES, CONCEPTION, 

Semaine 2:
On a commencer a coder le vecteur.cc pour après le separer en Vecteur.h et .cc, on n'est toujours pas entierement convaincu du fait qu'il faut 
separer les .h et .cc, on ne voit pas l'interet.
Pour l'instant on ne gère pas trop les erreurs professionellement, un petit cout avec une description de l'erreur fera l'affaire...
On avait déjà fait un petit peu de python au gymnase et quand on voulais inclure un autre fichier, c'etait déjà avec tout le code dejà fait, mais bon.
You guys are the professionals.
On a créer le point materiel et la constante gravitationel. On les a mis dans les mêmes fichier, a quoi bon tout separer?? So far so good

Semaine 3:
Oops, we forgot to code.

Semaine 4:
On a separer le point materiel dans son .h et .cc, all good for now.
On a créer ObjetMobile (edit from the future: on mis des vectors de double dans le protected, ayant completement oublié qu'on avait créer une classe vecteur juste pour ça),
on a fix quelques erreurs dans Vecteur, principalement les operateurs avait quelques faute. En même temps la syntaxe de ses operateurs sont bizarre.
A chaque fois on oublie comment faire l'operateur <<. C'est pas intuitif.

Semaine 5:
On recode l'operateur << du ObjetMobile parce qu'il etait faux. Choquant. 
WAAA MAIS. Ok on a completement oublié qu'on avait créer une classe Vecteur pour representer des vecteurs. Trop des genie. En plus ça rend les methodes qui utilise des additions
et multiplications mille fois plus simple. On s'était compliquer la vie. C'est plus beau mtn.




Semaine 




Semaine 




Semaine 




Semaine 




Semaine 




- Semaine de Vacance de Paque:

AAAAAAA Gros des gros gros gros gros problèmes. Déjà, on a decider de réelment gerer l'erreur dans Vecteur.h quand on veux additioner/soustraire duex vecteur de taille differentes.
Le problème c'est que c'est maintenant très moche et il y a de la repetition de code. Aussi on fait un peux plus de copies qu'avant mais au moins mtn, quand il y a une erreures, on le gère.
On a toujours des difficultés avec le makefile, c'est vraiment pas du tout claire comment faire fonctionner ce truc. En plus il faut le changer pour chaque teste qu'on fait, puisque
on ne vois pas comment faire un makefile pour tout.
On n'est toujours pas sur si un ObjetPhysique devrait avoir une contraine qui est un melange d'autres, ou juste un tableau de contrainte.
On a realiser que c'etait con de mettre des unique_ptr pour les Contraintes et Champs dans Systeme puisque les ObjetPhysique on en ont besoins aussi.
On avait aussi essayer de mettre des folders pour mettre des fichier similaire (PointMat, ObjetPhy, etc) ensemble mais cela demandait qu'on ecrivent des #include plus compliquer
et moche et cela était un peu confusing. Les "paths".
Le probleme principale:
Les trois fichiers ObjetPhysique.h, PointMateriel.h et Systeme_Dessin.h s'incluait en boucle, puisque ObjetPhysique est un Dessinable, mais Point PointMateriel est un ObjetPhysique,
et que la classe Systeme et SupportADessin (public Dessinable) utilisent des PointMateriel.
On avait donc essayer de separer chaque classe dans leur propre .h pour que ça soit claire et qu'on puisse inclure le minimum dans chaque classe,
sauf que cela avait empirer le problème et on avait beaucoup plus de boucle d'include (malgré le #pragma once??) 
Ayant fait un peu de recherche on trouvais des solutions POTENTIELLE qui utilisait
des #ifndef mais on arrivait pas a réelment comprendre comment ça fonctionnait, dans le sense comment correctement implementer ça dans notre code, et donc on a choisi de faire la 
meilleure deuxieme option (surement pas pour vous) de mettre tout ça dans le même fichier, appropriately named "TheBig3". CERTES, c'est pas très attirant niveau projet, MAIS ça fonctionne. 
Si tout est au même endroit, pas de boucle de inclusion. En plus, c'est plus simple de faire un makefile puisqu'il y a moins de fichier.

Semaine 10:
Bon, on y a reflechit, et on a conclu de ce gros fichier avec tout n'etait pas une si bonne idée après tout. Après un peu de discussion, on a réaliser qu'on pouvait mettre les prototypes
dans les .h puis inclure les class necessaires dans les .cc, afin d'eviter cette boucle en chaine. Donc c'est fait. Maintenant que nous avons mil et un fichiers, on veut les organiser dans
des folders mais on n'arrive toujours pas a comprendre comment correctement include avec les nouveau path names :(. Hélas. Il est aussi temps qu'on commence a faire des tests.... On en
n'avais pas encore fait hahahhaha... sauf pour la class vecteur au debut mais. Je met la faute sur le makefile (et donc sur nous pour ne pas avoir compris le makefile), puisque
on ne peut pas tester sans, mais on arrive pas a le faire fonctionner.
Un problème avec mettre des prototypes dans les .h est que le compilateur ne semble pas aimer créer une sous-class d'un prototype. Specifiquement une double-sous class, comme ObjetPhysique
qui est un ObjetMobile ET un Dessinable, donc il est possible que on mette juste la class Dessinable avec ObjetPhysique, puisque on a bel-et-bien mis Integrateur avec IntegrateurEulerCromer
et SupportADessin avec TextViewer. A voir.
..
Ok on a un petit peu abusé, on ne peut pas mettre des prototypes partout et on peut inclure des .h quand même. On va dessiner un schema des includes pour assurer qu'on a pas de boucle,
et pour voir quels include on peut mettre pour eviter des prototypes non necessaires.
Bon, pour finir, après du nettoyage, seulement SupportADessin et Dessinable ont un prototype chacun. C'est assez.
Ah, pour dieu sait pourquoi, on avait mis "protected" au lieu de "private". Pas entierement sûr pourquoi mais bon. C'est changée.